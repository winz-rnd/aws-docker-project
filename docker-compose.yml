version: '3.8'

services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: aws_docker_mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: aws_docker_db
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aws_docker_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      interval: 30s
    restart: unless-stopped

  # Spring Boot 백엔드
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aws_docker_backend
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DATABASE_URL: jdbc:mysql://mysql:3306/aws_docker_db?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
      DATABASE_USERNAME: appuser
      DATABASE_PASSWORD: apppassword
      DATABASE_DRIVER: com.mysql.cj.jdbc.Driver
      JPA_DDL_AUTO: update
      JPA_SHOW_SQL: "true"
      HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect
      SERVER_PORT: 8080
    ports:
      - "8081:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - aws_docker_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Flutter 웹 정적 서빙 (Nginx)
  frontend:
    image: nginx:alpine
    container_name: aws_docker_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/build_output:/usr/share/nginx/html:ro
    networks:
      - aws_docker_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped


  # Redis (캐싱용, 선택사항)
  redis:
    image: redis:7-alpine
    container_name: aws_docker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aws_docker_network
    command: redis-server --appendonly yes
    restart: unless-stopped
    profiles:
      - production

  # phpMyAdmin (개발용 DB 관리)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: aws_docker_phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: password
    ports:
      - "8082:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - aws_docker_network
    restart: unless-stopped
    profiles:
      - development

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  aws_docker_network:
    driver: bridge
    name: aws_docker_network