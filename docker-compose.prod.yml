# 프로덕션 환경용 Docker Compose 설정
# 사용법: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  mysql:
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max_connections=200

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JPA_DDL_AUTO: validate
      JPA_SHOW_SQL: "false"
      LOG_LEVEL: INFO
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseG1GC"
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx로 정적 파일 서빙
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/build/web:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 캐시
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # 로그 수집 (ELK 스택 대신 간단한 로그 수집기)
  logspout:
    image: gliderlabs/logspout
    command: syslog://logs:514
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  mysql_prod_data:
  redis_prod_data:
  nginx_logs: