name: Deploy to AWS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2  # Seoul region
  ECR_REPOSITORY_BACKEND: aws-docker-backend
  ECR_REPOSITORY_FRONTEND: aws-docker-frontend
  ECS_SERVICE: aws-docker-service
  ECS_CLUSTER: aws-docker-cluster
  ECS_TASK_DEFINITION: aws-docker-task-definition

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Spring Boot application
      run: |
        cd backend
        ./mvnw clean package -DskipTests
        cd ..

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'

    - name: Build Flutter web
      run: |
        cd frontend
        flutter pub get
        flutter build web --release
        cd ..

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Copy Flutter build output
        cp -r frontend/build/web/* frontend/build_output/
        
        # Create Dockerfile for frontend
        cat > frontend/Dockerfile.production << EOF
        FROM nginx:alpine
        COPY build_output /usr/share/nginx/html
        COPY ../nginx/nginx.conf /etc/nginx/conf.d/default.conf
        EXPOSE 80
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
        docker build -f frontend/Dockerfile.production -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    # Option 1: Deploy to ECS
    - name: Deploy to ECS
      if: ${{ vars.DEPLOY_TARGET == 'ECS' }}
      run: |
        # Update task definition with new image
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment

    # Option 2: Deploy to EC2
    - name: Deploy to EC2
      if: ${{ vars.DEPLOY_TARGET == 'EC2' }}
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        # Create SSH key file
        echo "$EC2_KEY" > ec2-key.pem
        chmod 600 ec2-key.pem
        
        # Deploy to EC2
        ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST << 'EOF'
          cd /home/ubuntu/aws-docker
          git pull origin main
          docker-compose down
          docker-compose pull
          docker-compose up -d
        EOF
        
        # Clean up
        rm -f ec2-key.pem