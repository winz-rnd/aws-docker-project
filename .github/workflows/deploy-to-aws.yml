name: Deploy to AWS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2  # Seoul region
  ECR_REPOSITORY_BACKEND: aws-docker-backend
  ECR_REPOSITORY_FRONTEND: aws-docker-frontend
  ECS_SERVICE: aws-docker-service
  ECS_CLUSTER: aws-docker-cluster
  ECS_TASK_DEFINITION: aws-docker-task-definition

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Spring Boot application
      run: |
        cd backend
        chmod +x gradlew
        ./gradlew clean build -x test
        cd ..

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'

    - name: Build Flutter web
      run: |
        cd frontend
        flutter pub get
        flutter build web --release
        cd ..

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build frontend Docker image from source code
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    # Deploy to EC2
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        # Create SSH key file
        echo "$EC2_KEY" > ec2-key.pem
        chmod 600 ec2-key.pem
        
        # Debug: Check if variables are set
        echo "Connecting to EC2 at $EC2_HOST as $EC2_USER"
        
        # Test connection first
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2-key.pem $EC2_USER@$EC2_HOST "echo 'SSH connection successful'"
        
        # Initial setup if needed
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2-key.pem $EC2_USER@$EC2_HOST << 'EOF'
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu
            
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Clone or update repository
          if [ ! -d "/home/ubuntu/aws-docker" ]; then
            git clone https://github.com/${{ github.repository }}.git /home/ubuntu/aws-docker
          fi
          
          cd /home/ubuntu/aws-docker
          git pull origin main
          
          # Create .env file with production values
          cat > .env << 'ENVEOF'
          DATABASE_URL=jdbc:mysql://mysql:3306/aws_docker_db?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
          DATABASE_USERNAME=appuser
          DATABASE_PASSWORD=apppassword
          DATABASE_DRIVER=com.mysql.cj.jdbc.Driver
          MYSQL_ROOT_PASSWORD=password
          MYSQL_DATABASE=aws_docker_db
          MYSQL_USER=appuser
          MYSQL_PASSWORD=apppassword
          SPRING_PROFILES_ACTIVE=prod
          SERVER_PORT=8080
          JPA_DDL_AUTO=update
          JPA_SHOW_SQL=false
          HIBERNATE_DIALECT=org.hibernate.dialect.MySQLDialect
          ENVEOF
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Create ECR registry environment variables
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          export ECR_REPOSITORY_BACKEND=${{ env.ECR_REPOSITORY_BACKEND }}
          export ECR_REPOSITORY_FRONTEND=${{ env.ECR_REPOSITORY_FRONTEND }}
          
          # Run deployment with production compose file
          docker-compose -f docker-compose.production.yml down || true
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
        EOF
        
        # Clean up
        rm -f ec2-key.pem