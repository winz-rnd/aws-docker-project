name: Backend Deploy to AWS App Runner

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: aws-docker-backend

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x backend/gradlew

    - name: Run tests
      run: |
        cd backend
        ./gradlew test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Test Results
        path: backend/build/test-results/test/*.xml
        reporter: java-junit

  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      id-token: write   # OIDC 토큰 획득을 위해 필요
      contents: read    # 리포지토리 컨텐츠 읽기

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build application
      run: |
        cd backend
        chmod +x gradlew
        ./gradlew bootJar

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        
        # Docker 이미지 빌드
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # ECR에 푸시
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update App Runner service
      run: |
        aws apprunner start-deployment \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }}

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for App Runner deployment to complete..."
        aws apprunner describe-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
          --query 'Service.Status' \
          --output text
        
        # 배포 완료까지 최대 10분 대기
        for i in {1..60}; do
          STATUS=$(aws apprunner describe-service \
            --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
            --query 'Service.Status' \
            --output text)
          
          echo "Current status: $STATUS"
          
          if [ "$STATUS" = "RUNNING" ]; then
            echo "Deployment completed successfully!"
            break
          elif [ "$STATUS" = "OPERATION_IN_PROGRESS" ]; then
            echo "Deployment in progress... waiting 10 seconds"
            sleep 10
          else
            echo "Unexpected status: $STATUS"
            exit 1
          fi
          
          if [ $i -eq 60 ]; then
            echo "Timeout waiting for deployment"
            exit 1
          fi
        done

    - name: Health check
      run: |
        # App Runner 서비스 URL 가져오기
        SERVICE_URL=$(aws apprunner describe-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
          --query 'Service.ServiceUrl' \
          --output text)
        
        echo "Service URL: https://$SERVICE_URL"
        
        # 헬스체크 수행 (최대 5분 대기)
        for i in {1..30}; do
          if curl -f -s "https://$SERVICE_URL/api/health" > /dev/null; then
            echo "Health check passed!"
            curl -s "https://$SERVICE_URL/api/health" | jq .
            break
          else
            echo "Health check failed, retrying in 10 seconds..."
            sleep 10
          fi
          
          if [ $i -eq 30 ]; then
            echo "Health check timeout"
            exit 1
          fi
        done

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Backend deployment successful!"
        else
          echo "❌ Backend deployment failed!"
        fi